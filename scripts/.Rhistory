geom_sf(data = hab, alpha = 0.5) +
geom_sf(data = rand_pts, shape = 0) +
geom_sf(data = walk_routes) +
coord_sf(datum = st_crs(pub)) +
theme_bw()  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
axis.text.y = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
legend.position = 'bottom')
ggplot() +
geom_sf(data = pub, aes(fill = Unit), alpha = 0.4) +
geom_sf(data = hab, alpha = 0.5) +
geom_sf(data = rand_pts, shape = 0) +
geom_sf(data = walk_routes) +
coord_sf(datum = st_crs(pub)) +
theme_bw()  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
axis.text.y = element_text(angle = 45, hjust = -0.5, vjust = 0.5),
legend.position = 'bottom')
ggplot() +
geom_sf(data = pub, aes(fill = Unit), alpha = 0.4) +
geom_sf(data = hab, alpha = 0.5) +
geom_sf(data = rand_pts, shape = 0) +
geom_sf(data = walk_routes) +
coord_sf(datum = st_crs(pub)) +
theme_bw()  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
axis.text.y = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
legend.position = 'bottom')
ggplot() +
geom_sf(data = pub, aes(fill = Unit), alpha = 0.4) +
geom_sf(data = hab, alpha = 0.5) +
geom_sf(data = rand_pts, shape = 0) +
geom_sf(data = walk_routes) +
coord_sf(datum = st_crs(pub)) +
theme_bw()  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
axis.text.y = element_text(angle = 45, hjust = 0, vjust = 0.5),
legend.position = 'bottom')
ggplot() +
geom_sf(data = pub, aes(fill = Unit), alpha = 0.4) +
geom_sf(data = hab, alpha = 0.5) +
geom_sf(data = rand_pts, shape = 0) +
geom_sf(data = walk_routes) +
coord_sf(datum = st_crs(pub)) +
theme_bw()  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
axis.text.y = element_text(angle = 45, hjust = -0.1, vjust = 0.5),
legend.position = 'bottom')
ggplot() +
geom_sf(data = pub, aes(fill = Unit), alpha = 0.4) +
geom_sf(data = hab, alpha = 0.5) +
geom_sf(data = rand_pts, shape = 0) +
geom_sf(data = walk_routes) +
coord_sf(datum = st_crs(pub)) +
theme_bw()  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
axis.text.y = element_text(angle = 45, hjust = 0.5, vjust = -0.5),
legend.position = 'bottom')
ggplot() +
geom_sf(data = pub, aes(fill = Unit), alpha = 0.4) +
geom_sf(data = hab, alpha = 0.5) +
geom_sf(data = rand_pts, shape = 0) +
geom_sf(data = walk_routes) +
coord_sf(datum = st_crs(pub)) +
theme_bw()  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
axis.text.y = element_text(angle = 45, hjust = 0.5, vjust = -1),
legend.position = 'bottom')
ggplot() +
geom_sf(data = pub, aes(fill = Unit), alpha = 0.4) +
geom_sf(data = hab, alpha = 0.5) +
geom_sf(data = rand_pts, shape = 0) +
geom_sf(data = walk_routes) +
coord_sf(datum = st_crs(pub)) +
theme_bw()  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
axis.text.y = element_text(angle = 65, hjust = 0.5, vjust = -0.5),
legend.position = 'bottom')
ggplot() +
geom_sf(data = pub, aes(fill = Unit), alpha = 0.4) +
geom_sf(data = hab, alpha = 0.5) +
geom_sf(data = rand_pts, shape = 0) +
geom_sf(data = walk_routes) +
coord_sf(datum = st_crs(pub)) +
theme_bw()  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
axis.text.y = element_text(angle = 45, hjust = 0.5, vjust = -0.5),
legend.position = 'bottom')
ggplot() +
geom_sf(data = pub, aes(fill = Unit), alpha = 0.4) +
geom_sf(data = hab, alpha = 0.5) +
geom_sf(data = rand_pts, shape = 0) +
geom_sf(data = walk_routes) +
coord_sf(datum = st_crs(pub)) +
theme_bw()  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
axis.text.y = element_text(angle = 45, hjust = 0.5, vjust = -0.5),
legend.position = 'bottom')
ggplot() +
geom_sf(data = pub, aes(fill = Unit), alpha = 0.4) +
geom_sf(data = hab, alpha = 0.5) +
geom_sf(data = rand_pts, shape = 0) +
geom_sf(data = walk_routes) +
coord_sf(datum = st_crs(pub)) +
theme_bw()  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
axis.text.y = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
legend.position = 'bottom')
View(pub)
ggplot() +
geom_sf(data = pub, aes(fill = Unit), alpha = 0.4) +
geom_sf(data = hab, alpha = 0.5) +
geom_sf(data = rand_pts, aes(fill = Plot_ID), shape = 0) +
geom_sf(data = walk_routes) +
coord_sf(datum = st_crs(pub)) +
theme_bw()  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
axis.text.y = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
legend.position = 'bottom')
View(rand_pts)
ggplot() +
geom_sf(data = pub, aes(fill = Unit), alpha = 0.4) +
geom_sf(data = hab, alpha = 0.5) +
geom_sf(data = rand_pts, aes(color = Plot_ID), shape = 0) +
geom_sf(data = walk_routes) +
coord_sf(datum = st_crs(pub)) +
theme_bw()  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
axis.text.y = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
legend.position = 'bottom')
ggplot() +
geom_sf(data = pub, aes(fill = Unit), alpha = 0.4) +
geom_sf(data = hab, alpha = 0.5) +
geom_sf(data = rand_pts, aes(color = Plot_ID), shape = 22) +
geom_sf(data = walk_routes) +
coord_sf(datum = st_crs(pub)) +
theme_bw()  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
axis.text.y = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
legend.position = 'bottom')
ggplot() +
geom_sf(data = pub, aes(fill = Unit), alpha = 0.4) +
geom_sf(data = hab, alpha = 0.5) +
geom_sf(data = rand_pts, aes(color = Plot_ID), shape = 22) +
geom_sf(data = walk_routes) +
coord_sf(datum = st_crs(pub)) +
theme_bw()  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
axis.text.y = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
legend.position = 'bottom')
ggplot() +
geom_sf(data = pub, aes(fill = Unit), alpha = 0.4) +
geom_sf(data = hab, alpha = 0.5) +
geom_sf(data = rand_pts, aes(color = Plot_ID), shape = 15) +
geom_sf(data = walk_routes) +
coord_sf(datum = st_crs(pub)) +
theme_bw()  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
axis.text.y = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
legend.position = 'bottom')
ggplot() +
geom_sf(data = pub, aes(fill = Unit), alpha = 0.4) +
geom_sf(data = hab, alpha = 0.5) +
geom_sf(data = walk_routes) +
geom_sf(data = rand_pts, aes(color = Plot_ID), shape = 15) +
coord_sf(datum = st_crs(pub)) +
theme_bw()  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
axis.text.y = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
legend.position = 'bottom')
rand_pts <- st_sample(target_hab, size = 60, type = 'regular') %>%
st_sf() %>%
mutate(Plot_ID = n():nrow(.), .before = 1)
View(rand_pts)
knitr::opts_chunk$set(echo = F)
knitr::opts_chunk$set(dpi = 300)
knitr::opts_chunk$set(message = F)
knitr::opts_chunk$set(warning = F)
knitr::opts_chunk$set(fig.align="left")
library(tidyverse)
library(sf)
library(terra)
library(smoothr)
set.seed(13)
hab <- st_read('../data/solidago-habitat/solidago-habitat.shp', quiet = T)
hab <- st_make_valid(hab) %>%
st_union() %>%
st_cast('POLYGON') %>%
st_transform(26910) %>%
st_sf() %>%
smoothr::smooth(., method = "chaikin")
hab <- st_buffer(hab, singleSide = T, dist = -10)
rand_pts <- st_sample(hab, size = 100) %>%
st_sf()
pub <- st_read('../data/PADUS3/PADUS3_0Combined_StateCA.shp', quiet = T) %>%
select(d_Own_Name, Unit_Nm)
hab1 <- st_transform(hab, st_crs(pub))
parcels <- st_intersects(hab1, pub)
pub <- pub[unique(unlist(parcels)),] %>%
st_transform(., st_crs(hab)) %>%
st_crop(., st_bbox(st_buffer(hab, 2500)))
rm(parcels, hab1)
pub <- pub %>%
filter(Unit_Nm == 'Humboldt Bay National Wildlife Refuge') %>%
rename(Unit = Unit_Nm)
target_hab <- st_intersection(hab, pub)
target_hab <- st_buffer(target_hab, dist = -15, singleSide = T)
rand_pts <- st_sample(target_hab, size = 60, type = 'regular') %>%
st_sf() %>%
mutate(Plot_ID = 1:n(), .before = 1)
foredune <- st_read('../data/foredune/foredune.shp', quiet = T) %>%
st_union() %>%
st_as_sf() %>%
rename(geometry = x) %>%
st_transform(., st_crs(hab)) %>%
st_buffer(50)
foredune <- data.frame(foredune = st_intersects(rand_pts, foredune) %>% lengths > 0 )
rand_pts <- bind_cols(rand_pts, foredune)
walk_routes <- rand_pts %>%
group_by(foredune) %>%
summarise(do_union = FALSE) %>%
st_cast("LINESTRING")
ggplot() +
geom_sf(data = pub, aes(fill = Unit), alpha = 0.4) +
geom_sf(data = hab, alpha = 0.5) +
geom_sf(data = walk_routes) +
geom_sf(data = rand_pts, aes(color = Plot_ID), shape = 15) +
coord_sf(datum = st_crs(pub)) +
theme_bw()  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
axis.text.y = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
legend.position = 'bottom')
rm(foredune)
rand_pts %>%
mutate(X = sf::st_coordinates(.)[,1],
Y = sf::st_coordinates(.)[,2], .before = 'geometry')
ggplot() +
geom_sf(data = pub, aes(fill = Unit), alpha = 0.4) +
geom_sf(data = hab, alpha = 0.5) +
geom_sf(data = walk_routes) +
geom_sf(data = rand_pts, aes(color = Plot_ID), shape = 15) +
coord_sf(datum = st_crs(pub)) +
theme_bw()  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
axis.text.y = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
legend.position = 'bottom', legend.box="vertical")
rand_pts <- st_sample(target_hab, size = 60, type = 'regular') %>%
st_sf() %>%
mutate(Plot = 1:n(), .before = 1)
foredune <- st_read('../data/foredune/foredune.shp', quiet = T) %>%
st_union() %>%
st_as_sf() %>%
rename(geometry = x) %>%
st_transform(., st_crs(hab)) %>%
st_buffer(50)
foredune <- data.frame(foredune = st_intersects(rand_pts, foredune) %>% lengths > 0 )
rand_pts <- bind_cols(rand_pts, foredune)
walk_routes <- rand_pts %>%
group_by(foredune) %>%
summarise(do_union = FALSE) %>%
st_cast("LINESTRING")
ggplot() +
geom_sf(data = pub, aes(fill = Unit), alpha = 0.4) +
geom_sf(data = hab, alpha = 0.5) +
geom_sf(data = walk_routes) +
geom_sf(data = rand_pts, aes(color = Plot), shape = 15) +
coord_sf(datum = st_crs(pub)) +
theme_bw()  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
axis.text.y = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
legend.position = 'bottom', legend.box="vertical")
writeOGR(rand_pts, dsn="../data/geodata/Plot-locations.gpx",
dataset_options="GPX_USE_EXTENSIONS=yes", layer="waypoints", driver="GPX",
overwrite_layer = T)
?writeOGR
?writeOGR
rgdal::writeOGR(rand_pts, dsn="../data/geodata/Plot-locations.gpx",
dataset_options="GPX_USE_EXTENSIONS=yes", layer="waypoints", driver="GPX",
overwrite_layer = T)
st_write(rand_pts, dsn="../data/geodata/Plot-locations.gpx")
st_write(rand_pts, dsn="../data/geodata/Plot-locations.gpx", driver = "GPX")
st_write(rand_pts, dsn = "../results/geodata/Plot-locations.gpx", driver = "GPX")
View(rand_pts)
select(rand_pts, Plot) %>%
st_write(., dsn = "../results/geodata/Plot-locations.gpx", driver = "GPX")
?st_write
st_drivers
st_drivers()
select(rand_pts, Plot) %>%
st_write(., dsn = "../results/geodata/Plot-locations.GPX", driver = "GPX")
st_write(hab, dsn = "../results/geodata/walking.GPX", driver = "GPX")
st_write(hab, dsn = "../results/geodata/walking", driver = "GPX")
st_write(hab, dsn = "../results/geodata/walking.GPX", driver = "GPX",
layer = "walking")
select(rand_pts, Plot) %>%
as(., "Spatial")
select(rand_pts, Plot) %>%
as(., "Spatial") %>%
st_write(., dsn = "../results/geodata/Plot-locations.GPX", driver = "GPX")
select(rand_pts, Plot) %>%
as(., "Spatial") %>%
writeOGR(., dsn = "../results/geodata/Plot-locations.gpx", driver = "GPX",
dataset_options = "GPX_USE_EXTENSIONS=yes")
select(rand_pts, Plot) %>%
as(., "Spatial") %>%
rgdal::writeOGR(., dsn = "../results/geodata/Plot-locations.gpx", driver = "GPX",
dataset_options = "GPX_USE_EXTENSIONS=yes")
rand_pts <- select(rand_pts, Plot) %>%
as(., "Spatial")
rgdal::writeOGR(rand_pts, dsn = "../results/geodata/Plot-locations.gpx", driver = "GPX",
dataset_options = "GPX_USE_EXTENSIONS=yes")
rgdal::writeOGR(layer = rand_pts, dsn = "../results/geodata/Plot-locations.gpx", driver = "GPX",
dataset_options = "GPX_USE_EXTENSIONS=yes")
select(rand_pts, Plot) %>%
st_transform(4326) %>%
st_write(., dsn = "../results/geodata/Plot-locations.GPX", driver = "GPX")
knitr::opts_chunk$set(echo = F)
knitr::opts_chunk$set(dpi = 300)
knitr::opts_chunk$set(message = F)
knitr::opts_chunk$set(warning = F)
knitr::opts_chunk$set(fig.align="left")
library(tidyverse)
library(sf)
library(terra)
library(smoothr)
set.seed(13)
hab <- st_read('../data/solidago-habitat/solidago-habitat.shp', quiet = T)
hab <- st_make_valid(hab) %>%
st_union() %>%
st_cast('POLYGON') %>%
st_transform(26910) %>%
st_sf() %>%
smoothr::smooth(., method = "chaikin")
hab <- st_buffer(hab, singleSide = T, dist = -10)
rand_pts <- st_sample(hab, size = 100) %>%
st_sf()
pub <- st_read('../data/PADUS3/PADUS3_0Combined_StateCA.shp', quiet = T) %>%
select(d_Own_Name, Unit_Nm)
hab1 <- st_transform(hab, st_crs(pub))
parcels <- st_intersects(hab1, pub)
pub <- pub[unique(unlist(parcels)),] %>%
st_transform(., st_crs(hab)) %>%
st_crop(., st_bbox(st_buffer(hab, 2500)))
rm(parcels, hab1)
pub <- pub %>%
filter(Unit_Nm == 'Humboldt Bay National Wildlife Refuge') %>%
rename(Unit = Unit_Nm)
target_hab <- st_intersection(hab, pub)
target_hab <- st_buffer(target_hab, dist = -15, singleSide = T)
rand_pts <- st_sample(target_hab, size = 60, type = 'regular') %>%
st_sf() %>%
mutate(Plot = 1:n(), .before = 1)
foredune <- st_read('../data/foredune/foredune.shp', quiet = T) %>%
st_union() %>%
st_as_sf() %>%
rename(geometry = x) %>%
st_transform(., st_crs(hab)) %>%
st_buffer(50)
foredune <- data.frame(foredune = st_intersects(rand_pts, foredune) %>% lengths > 0 )
rand_pts <- bind_cols(rand_pts, foredune)
walk_routes <- rand_pts %>%
group_by(foredune) %>%
summarise(do_union = FALSE) %>%
st_cast("LINESTRING")
ggplot() +
geom_sf(data = pub, aes(fill = Unit), alpha = 0.4) +
geom_sf(data = hab, alpha = 0.5) +
geom_sf(data = walk_routes) +
geom_sf(data = rand_pts, aes(color = Plot), shape = 15) +
coord_sf(datum = st_crs(pub)) +
theme_bw()  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
axis.text.y = element_text(angle = 45, hjust = 0.5, vjust = 0.5),
legend.position = 'bottom', legend.box="vertical")
rm(foredune)
rand_pts %>%
mutate(X = sf::st_coordinates(.)[,1],
Y = sf::st_coordinates(.)[,2], .before = 'geometry')
select(rand_pts, Plot) %>%
st_transform(4326) %>%
st_write(., dsn = "../results/geodata/Plot-locations.GPX", driver = "GPX")
select(rand_pts, name = Plot) %>%
st_write(., dsn = "../results/geodata/Plot-locations.GPX", driver = "GPX")
View(hab)
View(walk_routes)
hab %>%
mutate(name = if_else(foredune == TRUE, 'Foredune', 'Backdune')) %>%
st_write(., dsn = "../results/geodata/walking.GPX", driver = "GPX",
layer = "walking")
walk_routes %>%
mutate(name = if_else(foredune == TRUE, 'Foredune', 'Backdune')) %>%
st_write(., dsn = "../results/geodata/walking.GPX", driver = "GPX",
layer = "walking")
walk_routes %>%
mutate(name = if_else(foredune == TRUE, 'Foredune', 'Backdune')) #%>%
walk_routes %>%
mutate(name = if_else(foredune == TRUE, 'Foredune', 'Backdune', .before = geometry)) #%>%
walk_routes %>%
mutate(name = if_else(foredune == TRUE, 'Foredune', 'Backdune', .before = 'geometry')) #%>%
walk_routes %>%
mutate(name = if_else(foredune == TRUE, 'Foredune', 'Backdune'), .before = 'geometry')) #%>%
walk_routes %>%
mutate(name = if_else(foredune == TRUE, 'Foredune', 'Backdune'), .before = 'geometry') #%>%
walk_routes %>%
mutate(name = if_else(foredune == TRUE, 'Foredune', 'Backdune'), .before = 'geometry') %>%
select(-foredune) %>%
st_write(., dsn = "../results/geodata/walking.GPX", driver = "GPX",
layer = "walking")
walk_routes %>%
mutate(name = if_else(foredune == TRUE, 'Foredune', 'Backdune'), .before = 'geometry') %>%
select(-foredune) #%>%
walk_routes %>%
mutate(name = if_else(foredune == TRUE, 'Foredune', 'Backdune'), .before = 'geometry') %>%
select(-foredune) %>%
st_write(., dsn = "../results/geodata/walking.GPX", driver = "GPX",
layer = "walking")
walk_routes %>%
mutate(name = if_else(foredune == TRUE, 'Foredune', 'Backdune'), .before = 'geometry') %>%
select(-foredune) %>%
st_write(., dsn = "../results/geodata/walking.GPX", driver = "GPX")
walk_routes %>%
mutate(name = if_else(foredune == TRUE, 'Foredune', 'Backdune'), .before = 'geometry') %>%
select(-foredune) #%>%
View(walk_routes)
walk_routes %>%
mutate(name = if_else(foredune == TRUE, 'Foredune', 'Backdune'), .before = 'geometry') %>%
select(-foredune) #%>%
walk_routes %>%
mutate(name = if_else(foredune == TRUE, 'Foredune', 'Backdune'), .before = 'geometry') %>%
select(-foredune) %>%
st_write(., dsn = "../results/geodata/walking.GPX", driver = "GPX")
library(tidyverse)
setwd('~/Documents/SoS_GB_EcoRegion_Species_Talk/scripts')
spp <- read.csv('../data/species_data.csv')
View(spp)
f_tax <- pull(spp, Family) %>% unqiue()
f_tax <- unique(spp$Family)
f_tax <- sort(unique(spp$Family))
f-tax
f_tax
g_tax <- spp %>%
mutate(Genus = str_extract(Species, '$.* '))
View(g_tax)
g_tax <- spp %>%
mutate(Genus = str_extract(Species, '[A-Za-z]+'))
View(g_tax)
g_tax <- spp %>%
group_by(Genus) %>%
filter(n() >= 2)
spp <- read.csv('../data/species_data.csv') %>%
mutate(Genus = str_extract(Species, '[A-Za-z]+'))
g_tax <- spp %>%
group_by(Genus) %>%
filter(n() >= 2)
View(g_tax)
g_tax <- spp %>%
group_by(Genus) %>%
filter(n() >= 2) %>%
distinct(Genus) %>%
pull(Genus)
g_tax <- spp %>%
group_by(Genus) %>%
filter(n() >= 2) %>%
distinct(Genus) %>%
select(Family, Genus)
spp <- read.csv('../data/species_data.csv') %>%
mutate(Genus = str_extract(Species, '[A-Za-z]+'))
g_tax <- spp %>%
group_by(Genus) %>%
filter(n() >= 2) %>%
distinct(Genus) %>%
select(Family, Genus)
g_tax <- spp %>%
group_by(Genus) %>%
filter(n() >= 2) %>%
distinct(Genus, .keep_all = T) %>%
select(Family, Genus)
View(g_tax)
View(spp)
spp_tax <- spp %>%
select(Family, Genus, Species)
View(spp_tax)
spp_tax <- spp %>%
select(Family, Genus, Species) %>%
arrange(Family Genus, Species)
spp_tax <- spp %>%
select(Family, Genus, Species) %>%
arrange(Family, Genus, Species)
setwd('~/Documents/SoS_GB_EcoRegion_Species_Talk/scripts')
spp <- read.csv('../data/slide_order.csv')
spp
spp <- read.csv('../data/slide_order.csv') %>%
mutate(Genus = na_if(Genus, ""))
spp
spp <- read.csv('../data/slide_order.csv') %>%
mutate(Genus = na_if(Genus, ""),
Level = case_when(
Taxon_treated == Family ~ 'Family',
Taxon_treated == Genus ~ 'Genus',
!is.na(Genus) ~ 'Species',
is.na(Genus) ~ 'Infrafamily'
))
spp
spp <- read.csv('../data/slide_order.csv') %>%
mutate(Genus = na_if(Genus, ""),
Level = case_when(
Taxon_treated == Family ~ 'Family',
Taxon_treated == Genus ~ 'Genus',
!is.na(Genus) ~ 'Species',
is.na(Genus) ~ 'Infrafamily'
))
spp
